services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-container
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_KRAFT_CLUSTER_ID: "cluster-1-kafka"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - code-network

  producer:
    build:
      context: ./producer
    container_name: producer-container
    ports:
      - "8080:8080"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      SPRING_KAFKA_PROPERTIES_REQUEST_TIMEOUT_MS: "60000"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - code-network

  consumer:
    build:
      context: ./consumer
    container_name: consumer-container
    ports:
      - "8081:8081"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      SPRING_KAFKA_PROPERTIES_REQUEST_TIMEOUT_MS: "60000"
      SPRING_KAFKA_CONSUMER_GROUP_ID: "document-group-1"
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: "earliest"
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/code_db
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - code-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel notice
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - code-network
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: code_db
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 30s
      retries: 5
    networks:
      - code-network
volumes:
  kafka_data:
  redis_data:
  mongo_data:

networks:
  code-network:
    driver: bridge